{"version":3,"file":"static/js/368.dd095824.chunk.js","mappings":"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","sources":["CommonComponent/Pagination/index.tsx","validation/User/AddUserValidation.ts","pages/UserManagement/AddNewUserForm/index.tsx","pages/UserManagement/SearchForm/index.tsx","validation/User/UpdateUserValidation.ts","pages/UserManagement/UpdateUserForm/index.tsx","pages/UserManagement/index.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Recycling.js","../node_modules/@mui/icons-material/RestartAlt.js","../node_modules/@mui/icons-material/Search.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Pagination,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\ninterface PaginationProps {\r\n    pagination: {\r\n      rowsPerPage: number;\r\n      totalPages: number;\r\n      page: number;\r\n    };\r\n    handleRowsPerPageChange: (event: SelectChangeEvent<number>, child: React.ReactNode) => void;\r\n    handlePageChange: (event: React.ChangeEvent<unknown>, value: number) => void;\r\n  }\r\n\r\nconst useStyles = makeStyles({\r\n  paginationContainer: {\r\n    marginTop: \"2rem\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  dropdownRowPerPageLabel: {\r\n    marginRight: \"1rem\",\r\n  },\r\n  dropdownRowPerPage: {\r\n    marginRight: \"3rem\",\r\n  },\r\n});\r\n\r\nconst PaginationBar: React.FC<PaginationProps> = ({\r\n  pagination,\r\n  handleRowsPerPageChange,\r\n  handlePageChange,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.paginationContainer}>\r\n      {/* Dropdown menu for rows per page */}\r\n     \r\n      <FormControl className={classes.dropdownRowPerPage}>\r\n        <Select\r\n          labelId=\"rows-per-page-label\"\r\n          id=\"rows-per-page\"\r\n          value={pagination.rowsPerPage}\r\n          onChange={handleRowsPerPageChange}\r\n        >\r\n          <MenuItem value={5}>5</MenuItem>\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={20}>20</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {/* Pagination */}\r\n      <Pagination\r\n        count={pagination.totalPages} // Total number of pages\r\n        page={pagination.page} // Current page\r\n        onChange={handlePageChange} // Event handler for page change\r\n        variant=\"outlined\"\r\n        shape=\"rounded\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationBar;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const addUserSchema = Yup.object().shape({\r\n  userName: Yup.string()\r\n    .min(3, \"Username must be at least 3 characters\")\r\n    .max(10, \"Username cannot exceed 10 characters\")\r\n    .required(\"Username is required\"),\r\n  firstName: Yup.string()\r\n    .required(\"First Name is required\"),\r\n  lastName: Yup.string()\r\n    .required(\"Last Name is required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .matches(/^[A-Za-z0-9+_.-]+@(.+)$/, \"Invalid email format\")\r\n    .required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(15, \"Password cannot exceed 15 characters\")\r\n    .required(\"Password is required\"),\r\n  phone: Yup.string()\r\n    .matches(/^\\d{10,11}$/, \"Phone number must be 10 or 11 digits\")\r\n    .required(\"Phone number is required\"),\r\n  dateOfBirth: Yup.date()\r\n    .nullable() // Allow null values\r\n    .max(new Date(), \"Date of Birth must be before or equal to today\")\r\n    .required(\"Date of Birth is required\"),\r\n  userRoleEnum: Yup.string()\r\n    .required(\"Role is required\"),\r\n});\r\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Container, Grid, Input, InputLabel, MenuItem, Select, SelectChangeEvent, TextField } from '@mui/material';\r\nimport * as Yup from \"yup\";\r\nimport { getDecodeToken, useAuthToken } from '../../../utils/Auth/authUtils';\r\nimport { addUserSchema } from '../../../validation/User/AddUserValidation';\r\nimport { apiUrl } from '../../../variable/globalVariable';\r\n\r\n// Define an interface for the form data\r\ninterface FormData {\r\n    userName: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    phone:string;\r\n    dateOfBirth: null;\r\n    userRoleEnum: string;\r\n    createdBy: string;\r\n    updatedBy: string;\r\n}\r\n\r\nconst AddNewUserForm = ({ onClose }: { onClose: () => void }) => {\r\n    const accessToken = useAuthToken();\r\n\r\n    const decodeToken = getDecodeToken();\r\n    let userEmail: string | null = null;\r\n    if (decodeToken) {\r\n        userEmail = decodeToken.sub;\r\n        // console.log(\"userEmail\", userEmail);\r\n    }\r\n\r\n    const [listRole, setListRole] = useState<string[]>([]);\r\n    const initialFormData: FormData = {\r\n        userName: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        phone:\"\",\r\n        dateOfBirth: null,\r\n        userRoleEnum: 'CUSTOMER',\r\n        createdBy: \"\",\r\n        updatedBy: \"\"\r\n    };\r\n    const [formData, setFormData] = useState<FormData>(initialFormData);\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n    const [addUserError, setAddUserError] = useState<string | null>(null);\r\n    const today = new Date().toISOString().split('T')[0];\r\n\r\n\r\n    // [Handle] Fetching role list\r\n    useEffect(() => {\r\n        fetchRoleList()\r\n    }, []);\r\n    const fetchRoleList = async () => {\r\n        try {\r\n          const response = await axios.get(`${apiUrl}/user/role-list`,\r\n          {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}` // Set the token in the headers\r\n                }\r\n            }\r\n          );\r\n        //   console.log(\"List role\",response.data)\r\n          setListRole(response.data);\r\n        } catch (error: any) {\r\n            if (error.response && error.response.status === 404) {\r\n              // Handle 404 error here\r\n              setListRole([]);\r\n            } else {\r\n              // Handle other errors\r\n              alert(error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // [Handle] Fields change (Text Field, Select Field, File(Image) Field)\r\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target;\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value === \"\" && name === \"dateOfBirth\" ? null : value,\r\n      });\r\n    };\r\n    const handleSelectInputChange = (e: SelectChangeEvent<string>) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n\r\n    // [Handle] Submit adding dish form\r\n    const handleSubmit = async (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Check if formData.dateOfBirth is null\r\n            const dateOfBirth = formData.dateOfBirth ? new Date(formData.dateOfBirth) : null;\r\n            const dateOfBirthISO = dateOfBirth ? dateOfBirth.toISOString() : '';\r\n\r\n            // Construct the payload\r\n            const payload = {\r\n                userName: formData.userName,\r\n                firstName: formData.firstName,\r\n                lastName: formData.lastName,\r\n                email: formData.email,\r\n                password: formData.password,\r\n                phone: formData.phone,\r\n                dateOfBirth: dateOfBirthISO,\r\n                userRoleEnum: formData.userRoleEnum,\r\n                createdBy: userEmail ? userEmail : \"Unknown\",\r\n                updatedBy: userEmail ? userEmail : \"Unknown\"\r\n            };\r\n            console.log(\"Add User Payload: \", payload);\r\n\r\n            await addUserSchema.validate(payload, { abortEarly: false });\r\n\r\n            await axios.post(`${apiUrl}/user/create`, payload, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            // Reset form data after successful submission\r\n            setFormData(initialFormData);\r\n\r\n            setErrors({});\r\n            setAddUserError(null);\r\n\r\n            // Close the popup\r\n            onClose();\r\n\r\n            // Reload the app after successful submission\r\n            window.location.reload();\r\n        } catch (error) {\r\n            const validationErrors: Record<string, string> = {}; // Define type for validationErrors\r\n\r\n            // Type assertion to tell TypeScript that error is an instance of Yup.ValidationError\r\n            if (error instanceof Yup.ValidationError) {\r\n                error.inner.forEach((err) => {\r\n                    const path = err.path ?? ''; // Use nullish coalescing operator to provide a default value\r\n                    validationErrors[path] = err.message;\r\n                });\r\n                setErrors(validationErrors);\r\n                setAddUserError(null);\r\n            } else if (axios.isAxiosError(error) && error.response) {\r\n              // Combining Both: axios.isAxiosError(error) && error.response\r\n              // Purpose: To ensure that the error is specifically an Axios error and that it includes a response from the server.\r\n              // Explanation: This combined check confirms two things:\r\n              // Axios Error: The error is related to an Axios request.\r\n              // Server Response: The server responded with some status code, indicating that the request reached the server, but there was an issue (like invalid credentials, server error, etc.)\r\n\r\n              const { data } = error.response;\r\n              if (data.errors) {\r\n                data.errors.forEach((err: string) => {\r\n                  // console.log(err)\r\n                  console.log(validationErrors)\r\n\r\n                  if (err.includes(\"Username\")) validationErrors.userName = err;\r\n                  if (err.includes(\"Email\")) validationErrors.email = err;\r\n                  if (err.includes(\"Phone\")) validationErrors.phone = err;\r\n                });\r\n                setErrors(validationErrors);\r\n              } else {\r\n                setAddUserError(\"An unexpected error occurred. Please try again.\");\r\n              }\r\n            } else {\r\n              setAddUserError(\"An unexpected error occurred. Please try again.\");\r\n            }\r\n          }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Container sx={{padding: 0}}>\r\n            <form >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Username\"\r\n                            type=\"text\"\r\n                            name=\"userName\"\r\n                            value={formData.userName}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.userName} // Check if error exists for the field\r\n                            helperText={errors.userName ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Firstname\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={formData.firstName}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.firstName} // Check if error exists for the field\r\n                            helperText={errors.firstName ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Lastname\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={formData.lastName}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.lastName} // Check if error exists for the field\r\n                            helperText={errors.lastName ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Email\"\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.email} // Check if error exists for the field\r\n                            helperText={errors.email ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Password\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={formData.password}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.password} // Check if error exists for the field\r\n                            helperText={errors.password ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Phone\"\r\n                            type=\"phone\"\r\n                            name=\"phone\"\r\n                            value={formData.phone}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.phone} // Check if error exists for the field\r\n                            helperText={errors.phone ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Date of Birth\"\r\n                            type=\"date\"\r\n                            name=\"dateOfBirth\"\r\n                            value={formData.dateOfBirth}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            inputProps={{\r\n                                max: today, // avoid user choose date in present and future\r\n                            }}\r\n                            error={!!errors.dateOfBirth} // Check if error exists for the field\r\n                            helperText={errors.dateOfBirth ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Select\r\n                            fullWidth\r\n                            label=\"Role Enum\"\r\n                            name=\"userRoleEnum\"\r\n                            value={formData.userRoleEnum}\r\n                            onChange={handleSelectInputChange}\r\n                            defaultValue={listRole && listRole.length > 0 ? listRole[0] : \"\"}\r\n                            error={!!errors.userRoleEnumError} // Check if error exists for the field\r\n                        >\r\n                            {(listRole && listRole.length > 0 && listRole !== null) ?\r\n                                listRole.map((role: string, index: number)=> (\r\n                                    <MenuItem key={index} value={role}>{role}</MenuItem>\r\n                                )\r\n                            ) : (\r\n                                <MenuItem>No role found</MenuItem>\r\n                            )}\r\n\r\n                        </Select>\r\n                        {errors.userRoleEnumError && <div style={{ color: \"#d32f2f\", fontSize: \"0.8rem\", fontWeight: 600 }}>{errors.userRoleEnumError}</div>}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button onClick={handleSubmit} variant=\"contained\" color=\"success\" sx={{ display: \"block\", margin: \"auto\" }}>Add</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddNewUserForm;","import React, { useState } from \"react\";\r\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { Button, MenuItem, Select, SelectChangeEvent, TextField } from \"@mui/material\";\r\n\r\ninterface SearchFormProps {\r\n    onSearch: (searchText: string, searchType: string) => void;\r\n  }\r\n\r\nconst SearchForm: React.FC<SearchFormProps> = ({ onSearch }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [searchType, setSearchType] = useState(\"ALL\"); // Default search type\r\n\r\n  const handleSearchTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value);\r\n    if (e.target.value === \"ALL\") {\r\n        setSearchText(\"\"); // Clear search text if type is \"ALL\"\r\n    }\r\n  };\r\n\r\n  const handleSearchTypeChange = (event: SelectChangeEvent<string>) => {\r\n    setSearchText(\"\");\r\n    setSearchType(event.target.value);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setSearchText(\"\");\r\n    setSearchType(\"ALL\");\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    console.log(\"Search Text:\", searchText);\r\n    console.log(\"Search Type:\", searchType);\r\n    onSearch(encodeURIComponent(searchText), searchType);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', padding: 0, margin: 0, marginBottom: \"2rem\" }}>\r\n      <form onSubmit={handleSubmit} style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>\r\n      <Button\r\n          type=\"button\"\r\n          variant=\"contained\"\r\n          onClick={handleReset}\r\n          sx={{\r\n            backgroundColor: '#e0e0e0',\r\n            color: \"#000000\",\r\n            fontSize: '14px',\r\n            marginBottom: '1rem',\r\n            width: '100%', // Apply on mobile\r\n            '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n              width: 'auto',\r\n              marginRight: \"1rem\"\r\n            },\r\n          }}\r\n        >\r\n          <RestartAltIcon sx={{ marginRight: \"2px\", fontSize: '24px' }} />\r\n          Reset\r\n        </Button>\r\n\r\n        <Select\r\n          variant=\"outlined\"\r\n          value={searchType}\r\n          onChange={handleSearchTypeChange}\r\n          sx={{\r\n            width: '100%',\r\n            marginBottom: '8px',\r\n            '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n              width: '35%',\r\n              marginRight: \"0.5rem\"\r\n            },\r\n          }}\r\n        >\r\n          <MenuItem value=\"ALL\">All</MenuItem>\r\n          <MenuItem value=\"NAME\">Firstname OR Lastname</MenuItem>\r\n          <MenuItem value=\"PHONE\">Phone</MenuItem>\r\n        </Select>\r\n\r\n        <TextField\r\n          type={searchType === \"PHONE\" ? \"number\" : \"text\"}\r\n          variant=\"outlined\"\r\n          label=\"Search...\"\r\n          value={searchText}\r\n          onChange={handleSearchTextChange}\r\n          disabled={searchType === \"ALL\"} // Disable when search type is \"ALL\"\r\n          sx={{\r\n            width: '100%',\r\n            marginBottom: '8px',\r\n            '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n              width: '35%',\r\n              marginRight: \"0.5rem\"\r\n            },\r\n          }}\r\n\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: \"#7c0303\", marginBottom: '1rem' }}\r\n          sx={{\r\n            width: '100%', // Apply on mobile\r\n            '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n              width: 'auto',\r\n              marginRight: \"0.5rem\"\r\n            },\r\n          }}\r\n        >\r\n          <SearchIcon style={{ fontSize: \"30px\" }} />\r\n        </Button>\r\n\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const updateUserSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .required(\"First Name is required\"),\r\n  lastName: Yup.string()\r\n    .required(\"Last Name is required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .matches(/^[A-Za-z0-9+_.-]+@(.+)$/, \"Invalid email format\")\r\n    .required(\"Email is required\"),\r\n  phone: Yup.string()\r\n    .matches(/^\\d{10,11}$/, \"Phone number must be 10 or 11 digits\")\r\n    .required(\"Phone number is required\"),\r\n  dateOfBirth: Yup.date()\r\n    .nullable() // Allow null values\r\n    .min(new Date(1880, 0, 1), \"Date of Birth must be after 1880\")\r\n    .max(new Date(), \"Date of Birth must be before current date\")\r\n    .required(\"Date of Birth is required\"),\r\n  roleEnum: Yup.string()\r\n    .required(\"Role is required\"),\r\n});\r\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Container, Grid, Input, InputLabel, MenuItem, Select, SelectChangeEvent, TextField } from '@mui/material';\r\nimport * as Yup from \"yup\";\r\nimport { getDecodeToken, useAuthToken } from '../../../utils/Auth/authUtils';\r\nimport { updateUserSchema } from '../../../validation/User/UpdateUserValidation';\r\nimport { apiUrl } from '../../../variable/globalVariable';\r\n\r\n// Define an interface for the form data\r\ninterface FormData {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone:string;\r\n    dateOfBirth: null;\r\n    roleEnum: string;\r\n    updatedBy: string;\r\n}\r\n\r\nconst UpdateUserForm = ({ onClose, selectedUserId }: { onClose: () => void; selectedUserId: number | null }) => {\r\n    const accessToken = useAuthToken();\r\n\r\n    const decodeToken = getDecodeToken();\r\n    let userEmail: string | null = null;\r\n    if (decodeToken) {\r\n        userEmail = decodeToken.sub;\r\n        // console.log(\"userEmail\", userEmail);\r\n    }\r\n\r\n    const [listRole, setListRole] = useState<string[]>([]);\r\n    const initialFormData: FormData = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone:\"\",\r\n        dateOfBirth: null,\r\n        roleEnum: 'CUSTOMER',\r\n        updatedBy: \"\",\r\n    };\r\n    const [formData, setFormData] = useState<FormData>(initialFormData);\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n    const [updateUserError, setUpdateUserError] = useState<string | null>(null);\r\n    const today = new Date().toISOString().split('T')[0];\r\n\r\n\r\n    // [Handle] Fetching role list\r\n    useEffect(() => {\r\n        fetchRoleList()\r\n        fetchUserDetails()\r\n    }, []);\r\n    const fetchRoleList = async () => {\r\n        try {\r\n          const response = await axios.get(`${apiUrl}/user/role-list`,\r\n          {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}` // Set the token in the headers\r\n                }\r\n            }\r\n          );\r\n        //   console.log(\"List role\",response.data)\r\n          setListRole(response.data);\r\n        } catch (error: any) {\r\n            if (error.response && error.response.status === 404) {\r\n              // Handle 404 error here\r\n              setListRole([]);\r\n            } else {\r\n              // Handle other errors\r\n              alert(error);\r\n            }\r\n        }\r\n    };\r\n    const fetchUserDetails = async () => {\r\n        try {\r\n            const response = await axios.get(`${apiUrl}/user/${selectedUserId}`,\r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}` // Set the token in the headers\r\n                }\r\n            }\r\n            );\r\n\r\n            const result = response.data;\r\n            // console.log(\"result\", result.dateOfBirth)\r\n\r\n            setFormData({\r\n                firstName: result.firstName,\r\n                lastName: result.lastName,\r\n                email: result.email,\r\n                phone: result.phone,\r\n                dateOfBirth: result.dateOfBirth ? result.dateOfBirth.split('T')[0] : null,\r\n                roleEnum: result.roleEnum,\r\n                updatedBy: userEmail ?  userEmail : \"\",\r\n            });\r\n            // console.log(\"Form Data\", formData)\r\n        } catch (error: any) {\r\n            console.error('Error fetching user details:', error);\r\n        }\r\n    };\r\n\r\n\r\n    // [Handle] Fields change (Text Field, Select Field, File(Image) Field)\r\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target;\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value === \"\" && name === \"dateOfBirth\" ? null : value,\r\n      });\r\n    };\r\n    const handleSelectInputChange = (e: SelectChangeEvent<string>) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n\r\n    // [Handle] Submit update user form\r\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Check if formData.dateOfBirth is null\r\n            const dateOfBirth = formData.dateOfBirth ? new Date(formData.dateOfBirth) : null;\r\n            const dateOfBirthISO = dateOfBirth ? dateOfBirth.toISOString() : '';\r\n\r\n            // Construct the payload\r\n            const payload = {\r\n                firstName: formData.firstName,\r\n                lastName: formData.lastName,\r\n                email: formData.email,\r\n                phone: formData.phone,\r\n                roleEnum: formData.roleEnum,\r\n                updatedBy: formData.updatedBy,\r\n                dateOfBirth: dateOfBirthISO,\r\n            };\r\n\r\n            await updateUserSchema.validate(formData, { abortEarly: false });\r\n\r\n\r\n\r\n            // console.log(\"Update User Payload: \", formData);\r\n            // const formDataToSend = new FormData();\r\n            // formDataToSend.append('firstName', formData.firstName);\r\n            // formDataToSend.append('lastName', formData.lastName);\r\n            // formDataToSend.append('email', formData.email);\r\n            // formDataToSend.append('phone', formData.phone);\r\n            // formDataToSend.append('dateOfBirth', dateOfBirthISO);\r\n            // formDataToSend.append('roleEnum', formData.roleEnum);\r\n            // formDataToSend.append('updatedBy', formData.updatedBy);\r\n\r\n            // console.log(\"Hello\")\r\n\r\n\r\n            await axios.put(`${apiUrl}/user/update/${selectedUserId}`, payload, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            // Reset form data after successful submission\r\n            setFormData(initialFormData);\r\n\r\n            setErrors({});\r\n            setUpdateUserError(null);\r\n\r\n            // Close the popup\r\n            onClose();\r\n\r\n            // Reload the app after successful submission\r\n            window.location.reload();\r\n        } catch (error) {\r\n            const validationErrors: Record<string, string> = {}; // Define type for validationErrors\r\n\r\n            // Type assertion to tell TypeScript that error is an instance of Yup.ValidationError\r\n            if (error instanceof Yup.ValidationError) {\r\n                error.inner.forEach((err) => {\r\n                    const path = err.path ?? ''; // Use nullish coalescing operator to provide a default value\r\n                    validationErrors[path] = err.message;\r\n                });\r\n\r\n                console.log(validationErrors)\r\n                setErrors(validationErrors);\r\n                setUpdateUserError(null);\r\n            } else if (axios.isAxiosError(error) && error.response) {\r\n              // Combining Both: axios.isAxiosError(error) && error.response\r\n              // Purpose: To ensure that the error is specifically an Axios error and that it includes a response from the server.\r\n              // Explanation: This combined check confirms two things:\r\n              // Axios Error: The error is related to an Axios request.\r\n              // Server Response: The server responded with some status code, indicating that the request reached the server, but there was an issue (like invalid credentials, server error, etc.)\r\n\r\n              const { data } = error.response;\r\n              if (data.errors) {\r\n                data.errors.forEach((err: string) => {\r\n                  // console.log(err)\r\n                  console.log(validationErrors)\r\n\r\n                  if (err.includes(\"Email\")) validationErrors.email = err;\r\n                  if (err.includes(\"Phone\")) validationErrors.phone = err;\r\n                });\r\n                setErrors(validationErrors);\r\n              } else {\r\n                setUpdateUserError(\"An unexpected error occurred. Please try again.\");\r\n              }\r\n            } else {\r\n              setUpdateUserError(\"An unexpected error occurred. Please try again.\");\r\n            }\r\n          }\r\n    };\r\n\r\n\r\n    return (\r\n        <Container sx={{padding: 0}}>\r\n            <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"ID\"\r\n                            type=\"text\"\r\n                            name=\"id\"\r\n                            value={selectedUserId}\r\n                            disabled\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Firstname\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={formData.firstName}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.firstName} // Check if error exists for the field\r\n                            helperText={errors.firstName ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Lastname\"\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={formData.lastName}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.lastName} // Check if error exists for the field\r\n                            helperText={errors.lastName ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Email\"\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.email} // Check if error exists for the field\r\n                            helperText={errors.email ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Phone\"\r\n                            type=\"phone\"\r\n                            name=\"phone\"\r\n                            value={formData.phone}\r\n                            onChange={handleInputChange}\r\n                            error={!!errors.phone} // Check if error exists for the field\r\n                            helperText={errors.phone ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"(*) Date of Birth\"\r\n                            type=\"date\"\r\n                            name=\"dateOfBirth\"\r\n                            value={formData.dateOfBirth}\r\n                            onChange={handleInputChange}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            inputProps={{\r\n                                max: today, // avoid user choose date in present and future\r\n                            }}\r\n                            error={!!errors.dateOfBirth} // Check if error exists for the field\r\n                            helperText={errors.dateOfBirth ?? ''} // Display error message if it exists\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Select\r\n                            fullWidth\r\n                            label=\"Role Enum\"\r\n                            name=\"roleEnum\"\r\n                            value={formData.roleEnum}\r\n                            onChange={handleSelectInputChange}\r\n                            defaultValue={listRole && listRole.length > 0 ? listRole[0] : \"\"}\r\n                            error={!!errors.roleEnumError} // Check if error exists for the field\r\n                        >\r\n                            {(listRole && listRole.length > 0 && listRole !== null) ?\r\n                                listRole.map((role: string, index: number)=> (\r\n                                    <MenuItem key={index} value={role}>{role}</MenuItem>\r\n                                )\r\n                            ) : (\r\n                                <MenuItem>No role found</MenuItem>\r\n                            )}\r\n\r\n                        </Select>\r\n                        {errors.roleEnumError && <div style={{ color: \"#d32f2f\", fontSize: \"0.8rem\", fontWeight: 600 }}>{errors.roleEnumError}</div>}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                        type='submit'\r\n                         variant=\"contained\" color=\"success\" sx={{ display: \"block\", margin: \"auto\" }}>Save</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default UpdateUserForm;","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport RecyclingIcon from \"@mui/icons-material/Recycling\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport moment from \"moment\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  SelectChangeEvent,\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Typography,\r\n  Container,\r\n  CardMedia,\r\n} from \"@mui/material\";\r\nimport PaginationBar from \"../../CommonComponent/Pagination\";\r\nimport AddNewUserForm from \"./AddNewUserForm\";\r\n// import UpdateDishForm from \"./UpdateDishForm\";\r\nimport { useAuthToken } from \"../../utils/Auth/authUtils\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport UpdateUserForm from \"./UpdateUserForm\";\r\nimport { apiUrl } from \"../../variable/globalVariable\";\r\n\r\n\r\n\r\n// Define an interface representing the structure of the data returned from the API\r\ninterface User {\r\n  userId: number;\r\n  username: string;\r\n  email: string;\r\n  phone: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  dateOfBirth: null;\r\n  roleEnum: string;\r\n  createdAt: string;\r\n  createdBy: string;\r\n  updatedBy: string;\r\n  deleted: boolean;\r\n}\r\n\r\nfunction UserManagement() {\r\n  const accessToken = useAuthToken();\r\n  const [list, setList] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [searchType, setSearchType] = useState(\"ALL\");\r\n  const [showDeletePopup, setShowDeletePopup] = useState(false);\r\n  const [itemIdToDelete, setItemIdToDelete] = useState<number | null>(null);\r\n  // Pagination\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    rowsPerPage: 5,\r\n    totalPages: 1,\r\n  });\r\n  const { id } = useParams();\r\n  const { page, rowsPerPage } = pagination;\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [showUpdateForm, setShowUpdateForm] = useState(false);\r\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\r\n\r\n\r\n\r\n  // [Handle] Fetching User List\r\n  useEffect(() => {\r\n    loadList();\r\n  }, [page, rowsPerPage, searchText, searchType]);\r\n\r\n  const loadList = async () => {\r\n    // Prevent concurrent API calls\r\n    if (loading) return;\r\n    setLoading(true); // Set loading state to true\r\n\r\n    try {\r\n      const result = await axios.get(\r\n        `${apiUrl}/user?searchType=${searchType}&searchText=${searchText}&pageNumber=${pagination.page - 1}&pageSize=${pagination.rowsPerPage}`,\r\n        {\r\n          headers: {\r\n              'Authorization': `Bearer ${accessToken}` // Set the token in the headers\r\n          }\r\n      }\r\n      );\r\n      // console.log(\"result\", result)\r\n      setList(result.data.content);\r\n\r\n      // pagination\r\n      const totalItems = result.data.totalElements;\r\n      // console.log(totalItems)\r\n\r\n      const totalPages = Math.ceil(totalItems / pagination.rowsPerPage);\r\n      setPagination({\r\n        ...pagination,\r\n        totalPages: totalPages,\r\n      });\r\n    } catch (error: any) {\r\n      if (error.response && error.response.status === 404) {\r\n        // Handle 404 error here\r\n        setList([]);\r\n      } else {\r\n        // Handle other errors\r\n        alert(error);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // [Handle] Pagination\r\n  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPagination({\r\n      ...pagination,\r\n      page: value,\r\n    });\r\n  };\r\n  const handleRowsPerPageChange = (event: SelectChangeEvent<number>, child: React.ReactNode) => {\r\n    setPagination({\r\n      ...pagination,\r\n      page: 1,\r\n      rowsPerPage: event.target.value as number,\r\n    });\r\n  };\r\n\r\n  // [Display + Handle] Soft-Delete\r\n  const deleteItem = async (id: number) => {\r\n    try {\r\n      await axios.put(`${apiUrl}/user/soft-delete/${id}`,\r\n      {},\r\n      {\r\n        headers: {\r\n            'Authorization': `Bearer ${accessToken}` // Set the token in the headers\r\n        }\r\n    });\r\n      loadList();\r\n      setShowDeletePopup(false);\r\n    } catch (error) {\r\n        // Handle error\r\n        console.error(\"Error updating isDeleted:\", error);\r\n    }\r\n  };\r\n  const handleDeleteClick = (itemId: number) => {\r\n    setItemIdToDelete(itemId);\r\n    setShowDeletePopup(true);\r\n  };\r\n  const handleDeleteConfirm = () => {\r\n    itemIdToDelete && deleteItem(itemIdToDelete);\r\n  };\r\n  const handleDeleteCancel = () => {\r\n    setShowDeletePopup(false);\r\n  };\r\n\r\n  // [Handle] Search Submit\r\n  const handleOnSearch = (searchText: string, searchType: string) => {\r\n    // console.log(\"Parent searchText: \", searchText);\r\n    // console.log(\"Parent searchType: \", searchType);\r\n\r\n    setSearchText(searchText);\r\n    setSearchType(searchType);\r\n\r\n    setPagination({\r\n        ...pagination,\r\n        page: 1,\r\n    });\r\n  };\r\n\r\n  // [Display + Close] Adding New User\r\n  const handleAddFormToggle = () => {\r\n    setShowAddForm(!showAddForm);\r\n  };\r\n  const handleAddFormClose = () => {\r\n    setShowAddForm(false);\r\n  };\r\n\r\n  // [Display + Close] Update User\r\n  const handleUpdateFormToggle = (userId: number) => {\r\n    setSelectedUserId(userId);\r\n    setShowUpdateForm(!showUpdateForm);\r\n  };\r\n  const handleUpdateFormClose = () => {\r\n    setShowUpdateForm(false);\r\n  };\r\n\r\n  return (\r\n    <Container sx={{minWidth: \"100%\"}}>\r\n      <Typography\r\n        align=\"center\"\r\n        variant=\"h5\"\r\n      >User Management</Typography>\r\n\r\n      <hr />\r\n\r\n      {/* Adding \"container\" attribute in grid parent to use Grid System and Flexbox */}\r\n      <Grid container justifyContent=\"flex-end\">\r\n        <Grid item>\r\n          <Link to=\"/user-management/trash-user-list\">\r\n            <Button variant=\"contained\" sx={{backgroundColor: \"#000000\"}}>\r\n              <RecyclingIcon sx={{ marginRight: \"4px\", fontSize: \"24px\" }} />\r\n              Trash\r\n            </Button>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <hr />\r\n\r\n      {/* Removing \"container\" attribute in grid parent to make Grid's width is full screen */}\r\n      <SearchForm onSearch={handleOnSearch} />\r\n\r\n      <hr />\r\n\r\n      <Grid container justifyContent=\"flex-end\" sx={{marginBottom: \"2rem\"}}>\r\n        <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              sx={{\r\n                borderRadius: '50%',\r\n                padding: '8px', // Adjust padding as needed\r\n                minWidth: '0', // Remove minimum width for proper sizing\r\n                minHeight: '0', // Remove minimum height for proper sizing\r\n              }}\r\n              onClick={handleAddFormToggle}\r\n              >\r\n              <AddIcon sx={{ fontSize: \"2.5rem\" }} />\r\n            </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {loading ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        <TableContainer style={{ maxHeight: \"350px\", overflowY: \"auto\"}}>\r\n          <Table className=\"border shadow\">\r\n            <TableHead sx={{ backgroundColor: '#000000' }}>\r\n              <TableRow>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>No.</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Name</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Phone</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Email</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Create At</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Create By</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}>Update By</TableCell>\r\n                <TableCell align=\"center\" sx={{ color: '#ffffff' }}></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n\r\n            {list.length === 0 ? (\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell\r\n                    colSpan={7} // because the number of columns in the table is 7\r\n                    align=\"center\"\r\n                    style={{ fontSize: \"14px\" }}\r\n                  >\r\n                    (Have no any record founded!)\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            ) : (\r\n              <TableBody>\r\n                {list.map((listItem, index) => (\r\n                  <TableRow key={listItem.userId}>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 30 }}>{index+1}</TableCell>\r\n\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 200 }}>{`${listItem.firstName} ${listItem.lastName}`}</TableCell>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 200 }}>{listItem.phone}</TableCell>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 200 }}>{listItem.email}</TableCell>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 300 }}>\r\n                      {moment(listItem.createdAt).format('MMMM Do YYYY, h:mm:ss a') }\r\n                    </TableCell>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 100 }}>{listItem.createdBy}</TableCell>\r\n                    <TableCell align=\"center\"  style={{ fontSize: \"14px\", minWidth: 100 }}>{listItem.updatedBy}</TableCell>\r\n                    <TableCell align=\"center\" style={{ minWidth: 400 }}>\r\n                      <Link to={`/user-management/view-user/${listItem.userId}`} style={{ textDecoration: 'none' }}>\r\n                        <Button variant=\"outlined\" color=\"primary\" sx={{ mx: 2 }}>View</Button>\r\n                      </Link>\r\n                      <Button\r\n                          variant=\"outlined\"\r\n                          color=\"warning\"\r\n                          sx={{ mx: 2 }}\r\n                          onClick={() => handleUpdateFormToggle(listItem.userId)} // Pass the user ID to handleUpdateFormToggle\r\n                      >\r\n                          Edit\r\n                      </Button>\r\n                      <Button variant=\"contained\" color=\"error\" onClick={() => handleDeleteClick(listItem.userId)} sx={{ mx: 2 }}>Delete</Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            )}\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n\r\n      <PaginationBar\r\n        pagination={pagination}\r\n        handleRowsPerPageChange={handleRowsPerPageChange}\r\n        handlePageChange={handlePageChange}\r\n      />\r\n\r\n      {/* [POPUP] Confirm Soft-Delete */}\r\n      {showDeletePopup && (\r\n        <Dialog open={showDeletePopup} onClose={handleDeleteCancel}>\r\n          <DialogTitle>Confirm Delete</DialogTitle>\r\n          <DialogContent>\r\n            Are you sure want to delete this user?\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDeleteConfirm} color=\"error\">\r\n              Delete\r\n            </Button>\r\n            <Button onClick={handleDeleteCancel}>\r\n              Cancel\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n\r\n      {/* [POPUP] Add New User Form */}\r\n      <Dialog open={showAddForm} onClose={handleAddFormToggle}>\r\n        <DialogTitle sx={{ fontSize: \"2rem\" ,textAlign: 'center' }}>Add New User</DialogTitle>\r\n        <DialogContent sx={{\r\n          padding: \"0.8rem\",\r\n          '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n            padding: 0,\r\n          },\r\n        }}>\r\n          <AddNewUserForm onClose={handleAddFormClose}/>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAddFormToggle} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* [POPUP] Update User Form */}\r\n      <Dialog open={showUpdateForm} onClose={handleUpdateFormToggle}>\r\n        <DialogTitle sx={{ fontSize: \"2rem\" ,textAlign: 'center' }}>Update New User</DialogTitle>\r\n        <DialogContent sx={{\r\n          padding: \"0.8rem\",\r\n          '@media (min-width: 37.563rem)': { // Apply on tablet and destop (<= 37.563rem/601px)\r\n            padding: 0,\r\n          },\r\n        }}>\r\n          <UpdateUserForm onClose={handleUpdateFormClose} selectedUserId={selectedUserId}/>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowUpdateForm(false)} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default UserManagement;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M5.77 7.15 7.2 4.78l1.03-1.71c.39-.65 1.33-.65 1.72 0l1.48 2.46-1.23 2.06-1 1.62zm15.95 5.82-1.6-2.66-3.46 2L18.87 16H20c.76 0 1.45-.43 1.79-1.11.14-.28.21-.58.21-.89 0-.36-.1-.71-.28-1.03M16 21h1.5c.76 0 1.45-.43 1.79-1.11L20.74 17H16v-2l-4 4 4 4zm-6-4H5.7l-.84 1.41c-.3.5-.32 1.12-.06 1.65.28.57.87.94 1.52.94H10zm-3.88-2.65 1.73 1.04L6.48 9.9 1 11.27l1.7 1.02-.41.69c-.35.59-.38 1.31-.07 1.92l1.63 3.26zm10.9-9.21-1.3-2.17C15.35 2.37 14.7 2 14 2h-3.53l3.12 5.2-1.72 1.03 5.49 1.37 1.37-5.49z\"\n}), 'Recycling');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 5V2L8 6l4 4V7c3.31 0 6 2.69 6 6 0 2.97-2.17 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93 0-4.42-3.58-8-8-8m-6 8c0-1.65.67-3.15 1.76-4.24L6.34 7.34C4.9 8.79 4 10.79 4 13c0 4.08 3.05 7.44 7 7.93v-2.02c-2.83-.48-5-2.94-5-5.91\"\n}), 'RestartAlt');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["useStyles","makeStyles","paginationContainer","marginTop","display","justifyContent","alignItems","dropdownRowPerPageLabel","marginRight","dropdownRowPerPage","_ref","pagination","handleRowsPerPageChange","handlePageChange","classes","_jsxs","className","children","_jsx","FormControl","Select","labelId","id","value","rowsPerPage","onChange","MenuItem","Pagination","count","totalPages","page","variant","shape","addUserSchema","Yup","userName","min","max","required","firstName","lastName","email","matches","password","phone","dateOfBirth","nullable","Date","userRoleEnum","_errors$userName","_errors$firstName","_errors$lastName","_errors$email","_errors$password","_errors$phone","_errors$dateOfBirth","onClose","accessToken","useAuthToken","decodeToken","getDecodeToken","userEmail","sub","listRole","setListRole","useState","initialFormData","createdBy","updatedBy","formData","setFormData","errors","setErrors","addUserError","setAddUserError","today","toISOString","split","useEffect","fetchRoleList","async","response","axios","get","concat","apiUrl","headers","data","error","status","alert","handleInputChange","e","name","target","Container","sx","padding","Grid","container","spacing","item","xs","TextField","fullWidth","label","type","helperText","sm","InputLabelProps","shrink","inputProps","defaultValue","length","userRoleEnumError","map","role","index","style","color","fontSize","fontWeight","Button","onClick","event","preventDefault","dateOfBirthISO","payload","console","log","validate","abortEarly","post","window","location","reload","validationErrors","inner","forEach","err","_err$path","path","message","isAxiosError","includes","margin","onSearch","searchText","setSearchText","searchType","setSearchType","width","marginBottom","onSubmit","encodeURIComponent","flexWrap","handleReset","backgroundColor","RestartAltIcon","disabled","SearchIcon","updateUserSchema","roleEnum","selectedUserId","updateUserError","setUpdateUserError","fetchUserDetails","result","put","encType","roleEnumError","list","setList","loading","setLoading","showDeletePopup","setShowDeletePopup","itemIdToDelete","setItemIdToDelete","setPagination","useParams","showAddForm","setShowAddForm","showUpdateForm","setShowUpdateForm","setSelectedUserId","loadList","content","totalItems","totalElements","Math","ceil","handleDeleteCancel","handleAddFormToggle","handleUpdateFormToggle","userId","minWidth","Typography","align","Link","to","RecyclingIcon","SearchForm","handleOnSearch","borderRadius","minHeight","AddIcon","TableContainer","maxHeight","overflowY","Table","TableHead","TableRow","TableCell","TableBody","colSpan","listItem","moment","createdAt","format","textDecoration","mx","handleDeleteClick","itemId","PaginationBar","child","Dialog","open","DialogTitle","DialogContent","DialogActions","handleDeleteConfirm","deleteItem","textAlign","AddNewUserForm","handleAddFormClose","UpdateUserForm","handleUpdateFormClose","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}