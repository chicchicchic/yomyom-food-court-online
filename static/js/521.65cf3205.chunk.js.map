{"version":3,"file":"static/js/521.65cf3205.chunk.js","mappings":"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","sources":["pages/PlaceOrder/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  Divider,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport MonetizationOnIcon from \"@mui/icons-material/MonetizationOn\";\r\nimport LocalAtmIcon from \"@mui/icons-material/LocalAtm\";\r\nimport axios from \"axios\";\r\nimport { getDecodeToken, useAuthToken } from \"../../utils/Auth/authUtils\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCartItemCount } from \"../../reducers/Slice/cartSlice\";\r\nimport jsPDF from \"jspdf\";\r\nimport { apiUrl } from \"../../variable/globalVariable\";\r\n\r\ninterface Dish {\r\n  dishId: number;\r\n  name: string;\r\n  originalPrice: number;\r\n  discount: number;\r\n  image: string;\r\n  mealSet: string;\r\n  preparationTime: number;\r\n  categoryEnum: string;\r\n\r\n  createdAt: string;\r\n  createdBy: string;\r\n  updatedBy: string;\r\n  deleted: boolean;\r\n}\r\n\r\ninterface PlaceOrderItem {\r\n  dish: Dish;\r\n  quantity: number;\r\n}\r\n\r\ninterface UserDetail {\r\n  userId: number;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n}\r\n\r\ninterface OrderItemDTO {\r\n  dishId: number;\r\n  quantity: number;\r\n  totalPrice: number;\r\n\r\n  createdBy: string;\r\n  updatedBy: string;\r\n}\r\n\r\ninterface OrderDTO {\r\n  userId: number;\r\n  address: string;\r\n  phone: string;\r\n  totalPayment: number;\r\n  paymentMethod: string;\r\n  deliveryTime: string;\r\n  notes: string;\r\n  orderItems: OrderItemDTO[];\r\n\r\n  createdBy: string;\r\n  updatedBy: string;\r\n}\r\n\r\nconst PlaceOrder: React.FC = () => {\r\n  const accessToken = useAuthToken();\r\n\r\n  const decodeToken = getDecodeToken();\r\n  let userEmail: string | null = null;\r\n  if (decodeToken) {\r\n    userEmail = decodeToken.sub;\r\n    // console.log(\"userDecoded\", decodeToken);\r\n  }\r\n\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { list } = location.state || {};\r\n\r\n  const [customerInfo, setCustomerInfo] = useState<UserDetail>({\r\n    userId: 0,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n  });\r\n  const [address, setAddress] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [notes, setNotes] = useState(\"\");\r\n  const [paymentMethod, setPaymentMethod] = useState(\"Cash on delivery\");\r\n  const [timeSlots, setTimeSlots] = useState<string[]>([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\r\n  const [openPlaceOrderSuccessSnackBar, setOpenPlaceOrderSuccessSnackBar] =\r\n    React.useState(false);\r\n  const addressRef = useRef<HTMLInputElement>(null);\r\n  const phoneRef = useRef<HTMLInputElement>(null); // Add a ref for phone input if needed\r\n  const timeSlotRef = useRef<HTMLSelectElement>(null);\r\n\r\n  const [openConfirmationDialog, setOpenConfirmationDialog] = useState(false);\r\n\r\n  const [fileFormat, setFileFormat] = useState<string>(\"pdf\");\r\n  const handleFileFormatChange = (event: SelectChangeEvent<string>) => {\r\n    setFileFormat(event.target.value);\r\n  };\r\n\r\n  // [Handle] Fetch User's Detail From User Email;\r\n  // [Handle] Generate Time Slots For Dropdown In Field \"Delivery Time\"\r\n  useEffect(() => {\r\n    // console.log(\"LIST PAY\", list);\r\n    if (userEmail !== null || userEmail === \"\") {\r\n      fetchDetailByEmail(userEmail);\r\n    }\r\n    generateTimeSlots();\r\n  }, []);\r\n  const fetchDetailByEmail = async (email: string) => {\r\n    try {\r\n      const response = await axios.get(`${apiUrl}/user/find-by-email`, {\r\n        params: { email },\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n      console.log(\"User Details Basket:\", response.data);\r\n      if (response.data) {\r\n        setCustomerInfo(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching User detail by email:\", error);\r\n    }\r\n  };\r\n  const generateTimeSlots = () => {\r\n    const currentTime = new Date();\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n    const slots = [];\r\n    let defaultSlot = \"\";\r\n\r\n    // [REMEMBER] set start hour to 6, end hour to 22\r\n    for (let hour = 2; hour < 24; hour++) {\r\n      const startHour = hour;\r\n      const endHour = hour + 1;\r\n      const timeSlot = `${startHour}:00 - ${endHour}:00`;\r\n\r\n      if (startHour >= currentHour) {\r\n        slots.push(timeSlot);\r\n\r\n        if (startHour === currentHour && currentMinute < 60) {\r\n          defaultSlot = timeSlot;\r\n        } else if (startHour > currentHour && defaultSlot === \"\") {\r\n          defaultSlot = timeSlot;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTimeSlots(slots);\r\n    setSelectedTimeSlot(defaultSlot || slots[0]);\r\n  };\r\n\r\n  // [Handle] Change Phone Number (if any)\r\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value; // Get the current value entered in the input field\r\n\r\n    // Check if the value is empty or consists only of digits (numbers)\r\n    if (!value || /^\\d*$/.test(value)) {\r\n      setPhone(value); // Update the state variable 'phone' with the entered value\r\n    } else {\r\n      // If the entered value is not empty and contains non-digit characters\r\n      setPhone(customerInfo.phone || \"\"); // Set 'phone' to the customer's existing phone number or an empty string if unavailable\r\n    }\r\n  };\r\n\r\n  // [Calculate] Calculate Total Price Of Each Dish\r\n  const calculateTotalPrice = (price: string, quantity: number) => {\r\n    return +price * quantity;\r\n  };\r\n\r\n  // [Calculate] Calculate Total Order Price\r\n  const totalOrderPrice = list?.reduce((acc: number, curr: PlaceOrderItem) => {\r\n    return (\r\n      acc +\r\n      calculateTotalPrice(\r\n        (curr.dish.originalPrice * (1 - curr.dish.discount / 100)).toFixed(2),\r\n        curr.quantity\r\n      )\r\n    );\r\n  }, 0);\r\n\r\n  // [Handle] Open and close Place Order Successfully SnackBar\r\n  const handleOpenPlaceOrderSuccessSnackBar = () => {\r\n    setOpenPlaceOrderSuccessSnackBar(true);\r\n  };\r\n  const handleClosePlaceOrderSuccessSnackBar = (\r\n    event: React.SyntheticEvent | Event,\r\n    reason?: string\r\n  ) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenPlaceOrderSuccessSnackBar(false);\r\n  };\r\n  const action = (\r\n    <React.Fragment>\r\n      <IconButton\r\n        size=\"small\"\r\n        aria-label=\"close\"\r\n        color=\"inherit\"\r\n        onClick={handleClosePlaceOrderSuccessSnackBar}\r\n      >\r\n        <CloseIcon fontSize=\"small\" />\r\n      </IconButton>\r\n    </React.Fragment>\r\n  );\r\n\r\n  // [Handle] Submit Place Order Form\r\n  const handlePlaceOrderClick = () => {\r\n    if (!address) {\r\n      if (addressRef.current) {\r\n        addressRef.current.focus();\r\n      }\r\n    } else if (!phone && !customerInfo.phone) {\r\n      if (phoneRef.current) {\r\n        phoneRef.current.focus();\r\n      }\r\n    } else if (!selectedTimeSlot) {\r\n      if (timeSlotRef.current) {\r\n        timeSlotRef.current.focus();\r\n      }\r\n    } else {\r\n      handlePlaceOrder();\r\n    }\r\n  };\r\n  // [Handle] Remove Item From Basket\r\n  const deleteAllItemsFromBasket = async (userId: number) => {\r\n    try {\r\n      await axios.delete(`${apiUrl}/basket/clear-all-items-from-basket/${userId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n      // alert(\"All Items In Basket Of UserId: \" + userId + \" removed without any errors !\")\r\n    } catch (error) {\r\n      console.error(\"Error removing items from basket:\", error);\r\n      alert(`Error removing items from basket: ${(error as Error).message}`);\r\n    }\r\n  };\r\n  const handlePlaceOrder = async () => {\r\n    try {\r\n      const orderItems: OrderItemDTO[] = list.map((item: PlaceOrderItem) => ({\r\n        dishId: item.dish.dishId,\r\n        quantity: item.quantity,\r\n        totalPrice: calculateTotalPrice(\r\n          (item.dish.originalPrice * (1 - item.dish.discount / 100)).toFixed(2),\r\n          item.quantity\r\n        ),\r\n        createdBy: customerInfo.email,\r\n        updatedBy: customerInfo.email,\r\n      }));\r\n\r\n      const orderDTO: OrderDTO = {\r\n        userId: customerInfo.userId,\r\n        address: address,\r\n        phone: phone || customerInfo.phone,\r\n        totalPayment: totalOrderPrice,\r\n        paymentMethod: paymentMethod,\r\n        deliveryTime: selectedTimeSlot,\r\n        notes: notes,\r\n        orderItems: orderItems,\r\n        createdBy: customerInfo.email,\r\n        updatedBy: customerInfo.email,\r\n      };\r\n\r\n      const response = await axios.post(`${apiUrl}/order/create`, orderDTO, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n\r\n      // console.log(\"Order placed successfully:\", response.data);\r\n      setOpenConfirmationDialog(true); // Confirm Do you want Export Bill ? (PDF, TXT)\r\n    } catch (error) {\r\n      // Handle error (e.g., show error message)\r\n      alert(\"Error placing order !\");\r\n    }\r\n  };\r\n  const handleConfirmExport = (exportBill: boolean) => {\r\n    setOpenConfirmationDialog(false); // Customer choose Yes/No => Close the popup first\r\n\r\n    if (exportBill) {\r\n      exportBillHandler();\r\n    }\r\n\r\n    if (paymentMethod === \"Cash on delivery\") {\r\n      // Handle successful response (e.g., show confirmation message)\r\n      handleOpenPlaceOrderSuccessSnackBar();\r\n\r\n      setTimeout(() => {\r\n        // Clear the basket\r\n        deleteAllItemsFromBasket(customerInfo.userId);\r\n        dispatch(setCartItemCount(0)); // Dispatch action to set count in Redux\r\n\r\n        // Navigate the next page\r\n        navigate(\"/order-tracking\", {\r\n          state: {\r\n            userId: customerInfo.userId,\r\n            userFirstName: customerInfo.firstName,\r\n            userEmail: customerInfo.email,\r\n            shippingAddress: address,\r\n            shippingPhone: phone || customerInfo.phone,\r\n          },\r\n        });\r\n      }, 2000); // Delay navigation by 2 seconds\r\n    } else if (paymentMethod === \"Credit Card\") {\r\n      // Handle successful response (e.g., show confirmation message)\r\n      handleOpenPlaceOrderSuccessSnackBar();\r\n\r\n      setTimeout(() => {\r\n        // Clear the basket\r\n        deleteAllItemsFromBasket(customerInfo.userId);\r\n        dispatch(setCartItemCount(0)); // Dispatch action to set count in Redux\r\n\r\n        navigate(\"/go-to-payment-credit-card\"); // Navigate to success page or handle success state\r\n      }, 2000); // Delay navigation by 3 seconds\r\n    }\r\n  };\r\n  const exportBillHandler = () => {\r\n    console.log(\"Exporting bill.......\");\r\n    const currentDate = new Date();\r\n    const formattedDate = currentDate.toLocaleString(); // Format the date as needed\r\n    const totalPayment = totalOrderPrice || 0;\r\n\r\n    let formattedBillContent = `\r\n                                    Yomyom Food Court\r\n                            123 Ngo Duc Ke, District 1, HCMC\r\n                                     tel: 02822539177\r\n                                  ${formattedDate}\r\n      =========================================================================\r\n      =========================================================================\r\n                           QTY                 PRICE                VALUE\r\n    `;\r\n\r\n    list.forEach((item: PlaceOrderItem, index: number) => {\r\n      // Adjust the spacing and alignment based on your requirements\r\n      formattedBillContent += `\r\n        ${index + 1}.${item.dish.name.padEnd(20)} \\n\r\n        ${\"\".padEnd(20)}${item.quantity.toString().padEnd(20)}$${(item.dish.originalPrice *(1 - item.dish.discount / 100)).toString().padEnd(20)}$${calculateTotalPrice((item.dish.originalPrice * (1 - item.dish.discount / 100)).toFixed(2),item.quantity)} \\n\r\n      `;\r\n    });\r\n\r\n    formattedBillContent += `\r\n      =========================================================================\r\n                                                     Total:          $${totalPayment.toString()}\r\n    `;\r\n\r\n    if (fileFormat === \"txt\") {\r\n      exportAsTxt(formattedBillContent);\r\n    } else if (fileFormat === \"pdf\") {\r\n      exportAsPdf(formattedBillContent);\r\n    }\r\n  };\r\n  const exportAsTxt = (billContent: string) => {\r\n    const blob = new Blob([billContent], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = \"bill.txt\";\r\n    link.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  const exportAsPdf = (billContent: string) => {\r\n    const doc = new jsPDF();\r\n    doc.text(billContent, 10, 10);\r\n    doc.save(\"bill.pdf\");\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {!userEmail || !list || list.length === 0 ? (\r\n        <React.Fragment>\r\n          <Typography variant=\"h5\">\r\n            No payment information available!\r\n          </Typography>\r\n        </React.Fragment>\r\n      ) : (\r\n        <Container maxWidth=\"lg\">\r\n          <Typography\r\n            variant=\"h4\"\r\n            gutterBottom\r\n            sx={{ textAlign: \"center\", fontSize: 30, fontWeight: 600 }}\r\n          >\r\n            Payment\r\n          </Typography>\r\n\r\n          {/* [INFO + FORM] USER INFO, PLACE ORDER FORM */}\r\n          <Paper elevation={3} sx={{ padding: 3, marginBottom: 3 }}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <Typography variant=\"body1\">\r\n                  Name: {customerInfo.firstName || \"Default Name\"} - ID:{\" \"}\r\n                  {customerInfo.userId || \"unknown\"}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <Typography variant=\"body1\">\r\n                  Total Items: {list.length}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  value={\r\n                    customerInfo.firstName || customerInfo.lastName\r\n                      ? customerInfo.firstName + \" \" + customerInfo.lastName\r\n                      : \"Default Fullname\"\r\n                  }\r\n                  disabled\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  value={customerInfo.email || \"Default Email\"}\r\n                  disabled\r\n                />\r\n              </Grid>\r\n\r\n              {/* Field address */}\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  type=\"text\"\r\n                  variant=\"outlined\"\r\n                  label={\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      What is your shipping address ?\r\n                      <Typography\r\n                        component=\"p\"\r\n                        sx={{ color: \"red\", marginLeft: \"0.2rem\" }}\r\n                      >\r\n                        (*)\r\n                      </Typography>\r\n                    </div>\r\n                  }\r\n                  value={address}\r\n                  onChange={(e) => setAddress(e.target.value)}\r\n                  inputRef={addressRef}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Field phone */}\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  type=\"number\"\r\n                  variant=\"outlined\"\r\n                  label={\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      Can deliver contact you with \"{customerInfo.phone}\" ?\r\n                      <Typography\r\n                        component=\"p\"\r\n                        sx={{ color: \"red\", marginLeft: \"0.2rem\" }}\r\n                      >\r\n                        (*)\r\n                      </Typography>\r\n                    </div>\r\n                  }\r\n                  value={phone}\r\n                  placeholder=\"Enter new phone number (if any)\"\r\n                  onChange={handlePhoneChange}\r\n                  inputRef={phoneRef}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Field Delivery Date */}\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  value={\"Delivery Date: Today\"}\r\n                  disabled\r\n                />\r\n              </Grid>\r\n\r\n              {/* Field Delivery Time */}\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    Delivery Time:\r\n                    <Typography\r\n                      component=\"p\"\r\n                      sx={{ color: \"red\", marginLeft: \"0.2rem\" }}\r\n                    >\r\n                      (*)\r\n                    </Typography>\r\n                  </FormLabel>\r\n                  <select\r\n                    id=\"deliveryTime\"\r\n                    value={selectedTimeSlot}\r\n                    onChange={(e) => setSelectedTimeSlot(e.target.value)}\r\n                    style={{\r\n                      padding: \"0.4rem\",\r\n                    }}\r\n                    ref={timeSlotRef}\r\n                  >\r\n                    {timeSlots.map((slot, index) => (\r\n                      <option key={index} value={slot}>\r\n                        {slot}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              {/* Field note */}\r\n              <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  label=\"Do you have any notes for us ?\"\r\n                  multiline\r\n                  rows={4}\r\n                  value={notes}\r\n                  onChange={(e) => setNotes(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* [LIST] LIST OF ORDER ITEM */}\r\n          <Paper elevation={3} sx={{ padding: 3, marginBottom: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ fontSize: \"16px\" }}>\r\n              Order Items\r\n            </Typography>\r\n            <List>\r\n              {list.map((item: PlaceOrderItem, index: number) => (\r\n                <div>\r\n                  <ListItem key={index}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={4} sm={3} md={2}>\r\n                        <Avatar\r\n                          src={`data:image/jpeg;base64, ${item.dish.image}`}\r\n                          sx={{\r\n                            width: 100,\r\n                            height: 100,\r\n                            borderRadius: 1,\r\n                            \"@media (max-width: 375px)\": {\r\n                              // display: \"inline\",\r\n                              width: 80,\r\n                              height: 80,\r\n                            },\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={8} sm={9} md={10}>\r\n                        <Grid container>\r\n                          <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                            <Typography variant=\"h6\">\r\n                              {item.dish.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body1\">\r\n                              Price:{\" \"}\r\n                              <b>\r\n                                {item.dish.discount > 0 && (\r\n                                  <>\r\n                                    <del style={{ marginRight: \"0.5rem\" }}>\r\n                                      {`$${item.dish.originalPrice}`}\r\n                                    </del>\r\n                                  </>\r\n                                )}\r\n                                <span>\r\n                                  {`$${(\r\n                                    item.dish.originalPrice *\r\n                                    (1 - item.dish.discount / 100)\r\n                                  ).toFixed(2)}`}\r\n                                </span>\r\n                              </b>\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                            <Typography variant=\"body1\">\r\n                              Quantity: <b>{item.quantity}</b>\r\n                            </Typography>\r\n                            <Typography variant=\"body1\">\r\n                              Total Price:{\" \"}\r\n                              <b>\r\n                                $\r\n                                {calculateTotalPrice(\r\n                                  (\r\n                                    item.dish.originalPrice *\r\n                                    (1 - item.dish.discount / 100)\r\n                                  ).toFixed(2),\r\n                                  item.quantity\r\n                                )}\r\n                              </b>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </ListItem>\r\n                  <Divider component=\"li\" />\r\n                </div>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n\r\n          {/* [RADIO BUTTON] PAYMENT METHOD SECTION */}\r\n          <Paper elevation={3} sx={{ padding: 3, marginBottom: 3 }}>\r\n            {/* Code here */}\r\n            <FormControl component=\"fieldset\">\r\n              <Typography variant=\"h6\" gutterBottom sx={{ fontSize: \"16px\" }}>\r\n                Payment Method\r\n              </Typography>\r\n              <RadioGroup\r\n                value={paymentMethod}\r\n                onChange={(e) => setPaymentMethod(e.target.value)}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"Cash on delivery\"\r\n                  control={<Radio />}\r\n                  label={\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <MonetizationOnIcon style={{ marginRight: 8 }} />\r\n                      Cash on delivery\r\n                    </div>\r\n                  }\r\n                />\r\n                <FormControlLabel\r\n                  value=\"Credit Card\"\r\n                  control={<Radio />}\r\n                  label={\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <LocalAtmIcon style={{ marginRight: 8 }} />\r\n                      Credit Cart\r\n                    </div>\r\n                  }\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Paper>\r\n\r\n          {/* [REVIEW] PAYMENT INFO */}\r\n          <Paper elevation={3} sx={{ padding: 3, marginBottom: 3 }}>\r\n            {/* ROW */}\r\n            <Grid container justifyContent=\"space-between\">\r\n              <Grid item xs={9} sm={10} md={11} lg={11}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                  }}\r\n                >\r\n                  Merchandise Subtotal:\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={3} sm={2} md={1} lg={1}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                  }}\r\n                >\r\n                  <b>${totalOrderPrice}</b>\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ROW */}\r\n            <Grid container justifyContent=\"space-between\">\r\n              <Grid item xs={9} sm={10} md={11} lg={11}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                  }}\r\n                >\r\n                  Shipping Subtotal:\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={3} sm={2} md={1} lg={1}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                  }}\r\n                >\r\n                  <b>Free</b>\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ROW */}\r\n            <Grid container justifyContent=\"space-between\">\r\n              <Grid item xs={9} sm={10} md={11} lg={11}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Payment:\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={3} sm={2} md={1} lg={1}>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  <b>${totalOrderPrice}</b>\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* [BUTTON] PLACE ORDER */}\r\n          <div style={{ textAlign: \"right\", marginTop: \"2rem\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{\r\n                fontSize: \"14px\",\r\n                backgroundColor:\r\n                  !address ||\r\n                  (!phone && !customerInfo.phone) ||\r\n                  !selectedTimeSlot\r\n                    ? \"gray\"\r\n                    : \"primary.main\",\r\n                cursor:\r\n                  !address ||\r\n                  (!phone && !customerInfo.phone) ||\r\n                  !selectedTimeSlot\r\n                    ? \"not-allowed\"\r\n                    : \"pointer\",\r\n              }}\r\n              onClick={handlePlaceOrderClick}\r\n              // disabled={\r\n              //   !address || (!phone && !customerInfo.phone) || !selectedTimeSlot\r\n              // }\r\n            >\r\n              Place Order\r\n            </Button>\r\n          </div>\r\n        </Container>\r\n      )}\r\n\r\n      {/* [SNACKBAR] PLACE ORDER SUCCESSFULLY */}\r\n      <Snackbar\r\n        open={openPlaceOrderSuccessSnackBar}\r\n        autoHideDuration={6000} // 6000 = 6s\r\n        onClose={handleClosePlaceOrderSuccessSnackBar}\r\n        message=\"Order placed successfully !\"\r\n        action={action}\r\n        sx={{\r\n          \"& .MuiSnackbarContent-root\": {\r\n            backgroundColor: \"green\",\r\n            color: \"white\",\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* [POPUP] Do You Want To Export Your Bill (PDF/ TXT) */}\r\n      <Dialog\r\n        open={openConfirmationDialog}\r\n        onClose={() => setOpenConfirmationDialog(false)}\r\n        aria-labelledby=\"confirmation-dialog-title\"\r\n        aria-describedby=\"confirmation-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"confirmation-dialog-title\">\r\n          {\"Order Confirmation\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"confirmation-dialog-description\">\r\n            Your order has been placed successfully. Do you want to export the\r\n            bill?\r\n          </DialogContentText>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"file-format-label\">File Format</InputLabel>\r\n            <Select\r\n              labelId=\"file-format-label\"\r\n              value={fileFormat}\r\n              onChange={handleFileFormatChange}\r\n            >\r\n              <MenuItem value=\"pdf\">PDF</MenuItem>\r\n              <MenuItem value=\"txt\">TXT</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleConfirmExport(false)}\r\n            color=\"primary\"\r\n          >\r\n            No\r\n          </Button>\r\n          <Button\r\n            onClick={() => handleConfirmExport(true)}\r\n            color=\"primary\"\r\n            autoFocus\r\n          >\r\n            Yes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrder;\r\n"],"names":["PlaceOrder","accessToken","useAuthToken","decodeToken","getDecodeToken","userEmail","sub","location","useLocation","navigate","useNavigate","dispatch","useDispatch","list","state","customerInfo","setCustomerInfo","useState","userId","firstName","lastName","email","phone","address","setAddress","setPhone","notes","setNotes","paymentMethod","setPaymentMethod","timeSlots","setTimeSlots","selectedTimeSlot","setSelectedTimeSlot","openPlaceOrderSuccessSnackBar","setOpenPlaceOrderSuccessSnackBar","React","addressRef","useRef","phoneRef","timeSlotRef","openConfirmationDialog","setOpenConfirmationDialog","fileFormat","setFileFormat","useEffect","fetchDetailByEmail","generateTimeSlots","async","response","axios","get","concat","apiUrl","params","headers","Authorization","console","log","data","error","currentTime","Date","currentHour","getHours","currentMinute","getMinutes","slots","defaultSlot","hour","startHour","endHour","timeSlot","push","calculateTotalPrice","price","quantity","totalOrderPrice","reduce","acc","curr","dish","originalPrice","discount","toFixed","handleOpenPlaceOrderSuccessSnackBar","handleClosePlaceOrderSuccessSnackBar","event","reason","action","_jsx","children","IconButton","size","color","onClick","CloseIcon","fontSize","deleteAllItemsFromBasket","delete","alert","message","handlePlaceOrder","orderItems","map","item","dishId","totalPrice","createdBy","updatedBy","orderDTO","totalPayment","deliveryTime","post","handleConfirmExport","exportBill","exportBillHandler","setTimeout","setCartItemCount","userFirstName","shippingAddress","shippingPhone","formattedDate","toLocaleString","formattedBillContent","forEach","index","name","padEnd","toString","exportAsTxt","exportAsPdf","billContent","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","doc","jsPDF","text","save","_jsxs","_Fragment","length","Container","maxWidth","Typography","variant","gutterBottom","sx","textAlign","fontWeight","Paper","elevation","padding","marginBottom","Grid","container","spacing","xs","sm","md","lg","TextField","fullWidth","value","disabled","label","style","display","alignItems","component","marginLeft","onChange","e","target","inputRef","placeholder","test","FormControl","FormLabel","id","ref","slot","multiline","rows","List","ListItem","Avatar","src","image","width","height","borderRadius","marginRight","Divider","RadioGroup","FormControlLabel","control","Radio","MonetizationOnIcon","LocalAtmIcon","justifyContent","marginTop","Button","backgroundColor","cursor","handlePlaceOrderClick","current","focus","Snackbar","open","autoHideDuration","onClose","Dialog","DialogTitle","DialogContent","DialogContentText","InputLabel","Select","labelId","MenuItem","DialogActions","autoFocus"],"sourceRoot":""}