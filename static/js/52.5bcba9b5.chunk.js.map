{"version":3,"file":"static/js/52.5bcba9b5.chunk.js","mappings":"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","sources":["validation/ContactForm/ContactValidation.ts","pages/ContactUs/index.tsx","../node_modules/@mui/icons-material/Phone.js"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const contactSchema = Yup.object().shape({\r\n  fullName: Yup.string()\r\n    .min(1, \"Fullname must be at least 1 characters\")\r\n    .max(20, \"Fullname cannot exceed 20 characters\")\r\n    .required(\"Fullname is required\"),\r\n  phone: Yup.string()\r\n    .matches(/^\\d{10,11}$/, \"Phone number must be 10 or 11 digits\")\r\n    .required(\"Phone number is required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .matches(/^[A-Za-z0-9+_.-]+@(.+)$/, \"Invalid email format\")\r\n    .required(\"Email is required\"),\r\n  title: Yup.string()\r\n    .min(5, \"Title must be at least 5 characters\")\r\n    .max(20, \"Title cannot exceed 20 characters\")\r\n    .required(\"Title is required\"),\r\n  content: Yup.string()\r\n    .min(5, \"Content must be at least 5 characters\")\r\n    .max(255, \"Content cannot exceed 255 characters\")\r\n    .required(\"Content is required\"),\r\n});\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { getDecodeToken } from \"../../utils/Auth/authUtils\";\r\nimport { Button, Grid, Paper, TextField, Typography } from \"@mui/material\";\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport InstagramIcon from \"@mui/icons-material/Instagram\";\r\nimport PhoneIcon from \"@mui/icons-material/Phone\";\r\nimport emailjs from \"@emailjs/browser\";\r\nimport { contactSchema } from \"../../validation/ContactForm/ContactValidation\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst contactMethods = [\r\n  {\r\n    icon: (\r\n      <FacebookIcon sx={{ width: \"3rem\", height: \"3rem\", color: \"blue\" }} />\r\n    ),\r\n    text1: \"We are happy to receive any questions from you.\",\r\n    text2: \"You can contact us via Facebook.\",\r\n    link: \"https://www.facebook.com/pages/Hadilao-Bitexco/1470561613079868\",\r\n  },\r\n  {\r\n    icon: (\r\n      <InstagramIcon sx={{ width: \"3rem\", height: \"3rem\", color: \"#e7464f\" }} />\r\n    ),\r\n    text1: \"Do you have any question ?.\",\r\n    text2: \"You can contact us via Instagram.\",\r\n    link: \"https://www.instagram.com/haidilao_vietnam/?hl=en\",\r\n  },\r\n  {\r\n    icon: (\r\n      <PhoneIcon sx={{ width: \"3rem\", height: \"3rem\", color: \"#d900b2\" }} />\r\n    ),\r\n    text1: \"Please ask if you have any questions.\",\r\n    text2: \"You can call us at 028 2253 9155.\",\r\n    link: \"tel:02822539177\",\r\n  },\r\n  // Add more contact methods as needed\r\n];\r\n\r\ninterface Contact {\r\n  fullName: string;\r\n  phone: string;\r\n  email: string | null;\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nfunction ContactUs() {\r\n  const decodeToken = getDecodeToken();\r\n  let userEmail: string | null = null;\r\n  if (decodeToken) {\r\n    userEmail = decodeToken.sub;\r\n  }\r\n\r\n  const [contactForm, setContactForm] = useState<Contact>({\r\n    fullName: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const form = useRef<HTMLFormElement>(null);\r\n\r\n\r\n  // [Handle] Set User Email From The Decode Token\r\n  useEffect(() => {\r\n    if (userEmail && userEmail !== null) {\r\n      setContactForm((prevContactForm) => ({\r\n        ...prevContactForm,\r\n        email: userEmail,\r\n      }));\r\n    }\r\n  }, [userEmail]);\r\n\r\n  // [Handle] Input Change\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setContactForm({\r\n      ...contactForm,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // [Handle] Submit Contact Form\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await contactSchema.validate(contactForm, { abortEarly: false });\r\n\r\n      if (form.current) {\r\n        emailjs\r\n          .sendForm(\"service_84eg9sf\", \"template_yb3uyh4\", form.current, {\r\n            publicKey: \"VjnK1IG6BndQt80Ck\",\r\n          })\r\n          .then(\r\n            () => {\r\n              // Clear Form\r\n              setContactForm((prevContactForm) => ({\r\n                ...prevContactForm,\r\n                fullName: \"\",\r\n                phone: \"\",\r\n                title: \"\",\r\n                content: \"\",\r\n              }));\r\n              setErrors({});\r\n              alert(\"Your question was sent successfully !\");\r\n            },\r\n            (error) => {\r\n              console.log(\"FAILED...\", error.text);\r\n              alert(\"Your question cannot sent !\");\r\n            }\r\n          );\r\n      }\r\n    } catch (error) {\r\n      const validationErrors: Record<string, string> = {}; // Define type for validationErrors\r\n\r\n      // Type assertion to tell TypeScript that error is an instance of Yup.ValidationError\r\n      if (error instanceof Yup.ValidationError) {\r\n        error.inner.forEach((err) => {\r\n          const path = err.path ?? \"\"; // Use nullish coalescing operator to provide a default value\r\n          validationErrors[path] = err.message;\r\n        });\r\n      }\r\n\r\n      setErrors(validationErrors);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {!userEmail ? (\r\n        <Typography variant=\"h5\">\r\n          Waiting for user information to be available!\r\n        </Typography>\r\n      ) : (\r\n        <>\r\n          {/* [SECTION] Google Map */}\r\n          <iframe\r\n            src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d7838.954812657775!2d106.69797618779307!3d10.774700347223993!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x31752fc152ac89bd%3A0x6e94677d89711aed!2zSGFpZGlsYW8gSHVvZ3VvIOa1t-W6leaNnueBq-mUhSBCaXRleGNv!5e0!3m2!1svi!2s!4v1719930582562!5m2!1svi!2s\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            style={{ border: 0, height: \"14rem\" }}\r\n            allowFullScreen\r\n            loading=\"lazy\"\r\n            referrerPolicy=\"no-referrer-when-downgrade\"\r\n            title=\"Contact Us Location\" // Added a descriptive title here\r\n          ></iframe>\r\n\r\n          {/* [SECTION] Social Contact */}\r\n          <Paper elevation={3} sx={{ marginTop: \"2rem\", position: \"relative\" }}>\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              sx={{\r\n                position: \"relative\",\r\n                textAlign: \"center\",\r\n                height: \"auto\", // Set height for the background image section\r\n                backgroundImage:\r\n                  `url(${process.env.PUBLIC_URL}/images/ContactUs/socialMediaContactBackground.jpg)`, // Replace with your image path\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\",\r\n                overflow: \"hidden\", // Hide overflow to contain blurred image\r\n                padding: \"3rem 1rem\",\r\n              }}\r\n            >\r\n              {/* Overlay with blur effect */}\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: 0,\r\n                  left: 0,\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  backdropFilter: \"blur(2px)\", // Blur effect for overlay\r\n                  backgroundColor: \"rgba(255, 255, 255, 0.6)\", // Semi-transparent white overlay\r\n                  zIndex: 1, // Ensure overlay is above other elements\r\n                }}\r\n              ></div>\r\n\r\n              {/* Content */}\r\n              {contactMethods.map((method, index) => (\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  sm={4}\r\n                  md={4}\r\n                  key={index}\r\n                  sx={{ zIndex: 2, marginBottom: \"2rem\" }}\r\n                >\r\n                  {/* Icon */}\r\n                  <Grid item>{method.icon}</Grid>\r\n\r\n                  {/* Text */}\r\n                  <Grid item>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      sx={{ fontWeight: 600, fontSize: \"1.2rem\" }}\r\n                    >\r\n                      {method.text1}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      sx={{ fontWeight: 600, fontSize: \"1.2rem\" }}\r\n                    >\r\n                      {method.text2}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  {/* Button */}\r\n                  <Grid item>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      component=\"a\"\r\n                      href={method.link}\r\n                      target=\"_blank\"\r\n                      sx={{\r\n                        backgroundColor: \"green\",\r\n                        \"&:hover\": {\r\n                          backgroundColor: \"#062517\", // Change this to the desired hover background color\r\n                        },\r\n                      }}\r\n                    >\r\n                      Start\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* [SECTION] Contact From */}\r\n          <div style={{ marginTop: \"2rem\", padding: \"2rem\" }}>\r\n            <Typography variant=\"h5\" gutterBottom sx={{ textAlign: \"center\" }}>\r\n              Contact Us\r\n            </Typography>\r\n\r\n            <form ref={form} onSubmit={handleSubmit}>\r\n              <Grid container spacing={2} justifyContent=\"center\">\r\n                <Grid item xs={12}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <TextField\r\n                        name=\"fullName\"\r\n                        label=\"Fullname\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={contactForm.fullName}\r\n                        onChange={handleChange}\r\n                        error={!!errors.fullName} // Check if error exists for the field\r\n                        helperText={errors.fullName ?? \"\"} // Display error message if it exists\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <TextField\r\n                        name=\"phone\"\r\n                        type=\"number\"\r\n                        label=\"Phone\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={contactForm.phone}\r\n                        onChange={handleChange}\r\n                        error={!!errors.phone} // Check if error exists for the field\r\n                        helperText={errors.phone ?? \"\"} // Display error message if it exists\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* Readonly Email Field */}\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={contactForm.email}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    error={!!errors.email} // Check if error exists for the field\r\n                    helperText={errors.email ?? \"\"} // Display error message if it exists\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    name=\"title\"\r\n                    label=\"Title\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={contactForm.title}\r\n                    onChange={handleChange}\r\n                    error={!!errors.title} // Check if error exists for the field\r\n                    helperText={errors.title ?? \"\"} // Display error message if it exists\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    name=\"content\"\r\n                    label=\"Content\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    multiline\r\n                    rows={4}\r\n                    value={contactForm.content}\r\n                    onChange={handleChange}\r\n                    error={!!errors.content} // Check if error exists for the field\r\n                    helperText={errors.content ?? \"\"} // Display error message if it exists\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    sx={{\r\n                      backgroundColor: \"green\",\r\n                      marginTop: \"1rem\",\r\n                      \"&:hover\": {\r\n                        backgroundColor: \"#062517\",\r\n                      },\r\n                    }}\r\n                  >\r\n                    Send Question\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactUs;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02z\"\n}), 'Phone');"],"names":["contactSchema","Yup","shape","fullName","min","max","required","phone","matches","email","title","content","contactMethods","icon","_jsx","FacebookIcon","sx","width","height","color","text1","text2","link","InstagramIcon","PhoneIcon","_errors$fullName","_errors$phone","_errors$email","_errors$title","_errors$content","decodeToken","getDecodeToken","userEmail","sub","contactForm","setContactForm","useState","errors","setErrors","form","useRef","useEffect","prevContactForm","handleChange","e","target","name","value","_Fragment","children","_jsxs","src","style","border","allowFullScreen","loading","referrerPolicy","Paper","elevation","marginTop","position","Grid","container","spacing","justifyContent","alignItems","textAlign","backgroundImage","concat","process","backgroundSize","backgroundPosition","overflow","padding","top","left","backdropFilter","backgroundColor","zIndex","map","method","index","item","xs","sm","md","marginBottom","Typography","variant","fontWeight","fontSize","Button","component","href","gutterBottom","ref","onSubmit","async","preventDefault","validate","abortEarly","current","emailjs","publicKey","then","alert","error","console","log","text","validationErrors","inner","forEach","err","_err$path","path","message","lg","TextField","label","fullWidth","onChange","helperText","type","InputProps","readOnly","multiline","rows","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}